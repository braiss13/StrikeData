@page
@model StrikeData.Pages.TeamData.CuriousFactsModel

@{
    ViewData["Title"] = "Curious Facts";
}

<h2 class="section-title">Curious Facts</h2>

<form method="get">
    <!-- Stat type selector: the <option> values are the base keys (e.g., "YRFI", "1IR/G", "F5IR/G") -->
    <div class="table-selector">
        <select id="statSelect"
                asp-for="SelectedStatType"
                asp-items="Model.StatTypeOptions"
                class="form-select w-auto d-inline-block"
                style="background-color:#1e3a8a; 
                       color:#ffffff; 
                       border:1px solid #2563eb; 
                       border-radius:0.25rem; 
                       padding:0.4rem 0.8rem;
                       margin-bottom: 1rem;"
                onchange="this.form.submit()">
        </select>
    </div>

    <!-- View toggle: same stat, different perspective (team itself vs opponents) -->
    <div class="table-selector mb-3">
        <button type="submit"
                name="Perspective"
                value="team"
                class="btn-stat-toggle @(Model.Perspective == "team" ? "" : "inactive")">
            Team Itself
        </button>
        <button type="submit"
                name="Perspective"
                value="opp"
                class="btn-stat-toggle @(Model.Perspective == "opp" ? "" : "inactive")">
            Their Opponents
        </button>
    </div>
</form>

<!-- Live description under the selector (populated by site.js based on the current selection) -->
<p id="statDescription" class="stat-desc" style="margin-left: 10px; color: #93c5fd;"></p>

<!-- Single results table (the selected perspective is reflected in the underlying query) -->
<table class="table table-striped sortable-table table-bordered table-sm pitching-table"
       style="margin: 1 auto;">
    <thead>
        <tr>
            <th data-sortable data-type="number">#</th>
            <th data-sortable data-type="string">Team</th>
            <th data-sortable data-type="number">Season</th>
            <th data-sortable data-type="number">Last 3</th>
            <th data-sortable data-type="number">Last 1</th>
            <th data-sortable data-type="number">Home</th>
            <th data-sortable data-type="number">Away</th>
            <th data-sortable data-type="number">Previous Season</th>
        </tr>
    </thead>
    <tbody>
    
    @{
        var index = 1;
        foreach (var r in Model.Rows)
        {
            <tr>
                <td>@index</td>
                <td>@r.TeamName</td>
                <!-- Values are displayed with two decimals; hyphen when null -->
                <td>@(r.CurrentSeason?.ToString("0.00") ?? "-")</td>
                <td>@(r.Last3Games?.ToString("0.00") ?? "-")</td>
                <td>@(r.LastGame?.ToString("0.00") ?? "-")</td>
                <td>@(r.Home?.ToString("0.00") ?? "-")</td>
                <td>@(r.Away?.ToString("0.00") ?? "-")</td>
                <td>@(r.PrevSeason?.ToString("0.00") ?? "-")</td>
            </tr>
            index++;
        }
        
    }
    </tbody>
</table>

@section Scripts {
    <script>
        (function () {
            // Description dictionary rendered server-side (base key -> text).
            // Escapes backslashes/quotes to keep valid JS string literals.
            const descriptions = {
                @foreach (var kvp in Model.StatDescriptions)
                {
                    <text>'@kvp.Key': "@kvp.Value.Replace("\\", "\\\\").Replace("\"", "\\\"")",</text>
                }
            };

            // Current perspective from the model ("team" | "opp")
            const perspective = "@Model.Perspective";

            // Initialize description behavior using the global helper (adds a perspective suffix automatically)
            StrikeData.initCuriousFactsDescription('statSelect', 'statDescription', descriptions, perspective);
        })();
    </script>
}
