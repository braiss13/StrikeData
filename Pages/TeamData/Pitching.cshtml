@page
@model StrikeData.Pages.TeamData.PitchingModel
@{
    ViewData["Title"] = "Pitching Stats";
}

<h2 class="section-title">Pitching Stats</h2>

<!-- View toggles: the UI switches between Basic and Advanced sets -->
<div class="table-selector">
    <button id="basicBtn" type="button" class="btn-stat-toggle" onclick="showTable('basic')">
        Basic
    </button>
    <button id="advancedBtn" type="button" class="btn-stat-toggle inactive" onclick="showTable('advanced')">
        Advanced
    </button>
</div>

<!-- BASIC table: core MLB metrics (up to AVG) -->
<div id="basicTable">
    <table class="table table-striped table-bordered sortable-table table-sm table-with-tooltips">
        <thead>
            <tr>
                <th data-sortable data-type="number">#</th>
                <th data-sortable data-type="string">Team</th>
                <th data-sortable data-type="number">Games</th>
                @foreach (var statName in Model.BasicStatNames)
                {
                    var hasMeta = Model.StatMeta.TryGetValue(statName, out var meta);
                    if (hasMeta && !string.IsNullOrWhiteSpace(meta!.Description))
                    {
                        <th data-sortable data-type="number">
                            <span class="stat-head">
                                <span class="stat-abbr" title="" tabindex="0" aria-label="@meta.LongName"
                                    aria-describedby="tip-@statName">@statName</span>
                                <div id="tip-@statName" class="stat-tooltip" role="tooltip">
                                    <div class="stat-tooltip-title">@meta.LongName (@statName)</div>
                                    <div class="stat-tooltip-body">@meta.Description</div>
                                </div>
                            </span>
                        </th>
                    }
                    else
                    {
                        <th>
                            <span class="stat-head">
                                <span class="stat-abbr" title="" tabindex="0"
                                    aria-label="@(hasMeta? meta!.LongName : statName)">@statName</span>
                            </span>
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                var index_basic = 1;
                if (Model.TeamPitchingStats != null && Model.TeamPitchingStats.Count > 0)
                {
                    foreach (var row in Model.TeamPitchingStats)
                    {
                        <tr>
                            <td>@index_basic</td>
                            <td>@row.TeamName</td>
                            <td>@row.Games</td>
                            @foreach (var statName in Model.BasicStatNames)
                            {
                                float? val;
                                row.Stats.TryGetValue(statName, out val);
                                <td>@(val.HasValue? val.Value.ToString("0.##") : "-")</td>
                            }
                        </tr>
                        index_basic++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(3 + Model.BasicStatNames.Count)" style="text-align:center;">No data available</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- ADVANCED table: extended MLB + TeamRankings metrics -->
<div id="advancedTable" style="display:none;">
    <table class="table table-striped table-bordered sortable-table table-sm pitching-table table-with-tooltips">
        <thead>
            <tr>
                <th data-sortable data-type="number">#</th>
                <th data-sortable data-type="string">Team</th>
                <th data-sortable data-type="number">Games</th>
                @foreach (var statName in Model.AdvancedStatNames)
                {
                    var hasMeta = Model.StatMeta.TryGetValue(statName, out var meta);
                    if (hasMeta && !string.IsNullOrWhiteSpace(meta!.Description))
                    {
                        <th data-sortable data-type="number">
                            <span class="stat-head">
                                <span class="stat-abbr" title="" tabindex="0" aria-label="@meta.LongName"
                                    aria-describedby="tip-@statName">@statName</span>
                                <div id="tip-@statName" class="stat-tooltip" role="tooltip">
                                    <div class="stat-tooltip-title">@meta.LongName (@statName)</div>
                                    <div class="stat-tooltip-body">@meta.Description</div>
                                </div>
                            </span>
                        </th>
                    }
                    else
                    {
                        <th>
                            <span class="stat-head">
                                <span class="stat-abbr" title="" tabindex="0"
                                    aria-label="@(hasMeta? meta!.LongName : statName)">@statName</span>
                            </span>
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                var index_advanced = 1;
                if (Model.TeamPitchingStats != null && Model.TeamPitchingStats.Count > 0)
                {
                    foreach (var row in Model.TeamPitchingStats)
                    {
                        <tr>
                            <td>@index_advanced</td>
                            <td>@row.TeamName</td>
                            <td>@row.Games</td>
                            @foreach (var statName in Model.AdvancedStatNames)
                            {
                                float? val;
                                row.Stats.TryGetValue(statName, out val);
                                <td>@(val.HasValue? val.Value.ToString("0.##") : "-")</td>
                            }
                        </tr>
                        index_advanced++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(3 + Model.AdvancedStatNames.Count)" style="text-align:center;">No data available</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<script>
    // Switches visibility between the Basic and Advanced tables and updates button styles.
    function showTable(type) {
        document.getElementById('basicTable').style.display = (type === 'basic') ? 'block' : 'none';
        document.getElementById('advancedTable').style.display = (type === 'advanced') ? 'block' : 'none';

        const basicBtn = document.getElementById('basicBtn');
        const advancedBtn = document.getElementById('advancedBtn');
        if (type === 'basic') {
            basicBtn.classList.remove('inactive');
            advancedBtn.classList.add('inactive');
        } else {
            basicBtn.classList.add('inactive');
            advancedBtn.classList.remove('inactive');
        }
    }

    // Default view on initial load.
    showTable('basic');
</script>
