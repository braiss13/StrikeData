@page
@model StrikeData.Pages.TeamData.FieldingModel
@using System.Text.Json

@{
    ViewData["Title"] = "Fielding Stats";
}

<h2 class="section-title">Fielding Stats</h2>

@* -- Controls: single dropdown used to filter by StatType (or show all) -- *@
<form method="get">
    <div class="table-selector">
        <select id="statSelect"
                asp-for="SelectedStatTypeId"
                asp-items="Model.StatOptions"
                class="form-select w-auto d-inline-block"
                style="background-color:#1e3a8a;
                       color:#ffffff;
                       border:1px solid #2563eb;
                       border-radius:0.25rem;
                       padding:0.4rem 0.8rem;
                       margin-bottom: 1rem;"
                onchange="this.form.submit();">
            @* Options are provided by the PageModel (includes a leading '-- All --') *@
        </select>
    </div>
</form>

@* Dynamic helper text: shows the glossary description for the currently selected StatType.
   The dictionary (Id -> description) is injected from the PageModel and wired via StrikeData.initStatDescription. *@
<p id="statDescription" class="stat-desc" style="margin-left: 10px; color: #93c5fd;"></p>

@* ----- Results table -----
   This table lists one row per team. The numeric columns are the "split" values coming
   from TeamRankings (Current Season, Last 3, Last 1, Home, Away, Previous).
   Sorting attributes (data-sortable, data-type) are used by the site's JS sorter. *@
<table class="table table-striped table-bordered sortable-table table-sm pitching-table" style="margin: 1 auto;">
    <thead>
        <tr>
            @* Index column rendered client-side to give the user a quick sense of ranking after sorting *@
            <th data-sortable data-type="number">#</th>
            <th data-sortable data-type="string">Team</th>
            <th data-sortable data-type="number">Games</th>
            @* All split columns are numeric; they can be sorted ascending/descending *@
            <th data-sortable data-type="number">Season</th>
            <th data-sortable data-type="number">Last 3</th>
            <th data-sortable data-type="number">Last 1</th>
            <th data-sortable data-type="number">Home</th>
            <th data-sortable data-type="number">Away</th>
            <th data-sortable data-type="number">Previous</th>
        </tr>
    </thead>
    <tbody>
        @{
            // Row counter; resets after each filter change because the table is rebuilt server-side.
            var index = 1;

            if (Model.TeamStats != null && Model.TeamStats.Count > 0)
            {
                foreach (var stat in Model.TeamStats)
                {
                    <tr>
                        <td>@index</td>
                        <td>@stat.Team.Name</td>

                        @* Total number of games is stored on Team and reused across all stats *@
                        <td>@(stat.Team.Games ?? 0)</td>

                        @* Fielding values are stored in TeamStat split fields (per-game from TeamRankings).
                           CurrentSeason corresponds to the "2025" column in TR. *@
                        <td>@stat.CurrentSeason</td>
                        <td>@(stat.Last3Games ?? 0)</td>
                        <td>@(stat.LastGame ?? 0)</td>
                        <td>@(stat.Home ?? 0)</td>
                        <td>@(stat.Away ?? 0)</td>
                        <td>@(stat.PrevSeason ?? 0)</td>
                    </tr>
                    index++;
                }
            }
            else
            {
                @* Graceful empty state when no results match the selected filter *@
                <tr>
                    <td colspan="9" style="text-align:center;">No data available</td>
                </tr>
            }
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // After the page renders, wire the dropdown to the description paragraph.
        // The dictionary is rendered server-side and consumed by a shared initializer.
        document.addEventListener('DOMContentLoaded', function () {
            const descriptions = @Html.Raw(JsonSerializer.Serialize(Model.StatDescriptions));
            StrikeData.initStatDescription('statSelect', 'statDescription', descriptions);
        });
    </script>
}
