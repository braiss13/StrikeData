// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StrikeData.Data;

#nullable disable

namespace StrikeData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250823185815_AddMatchesConfiguration")]
    partial class AddMatchesConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StrikeData.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Attendance")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayErrors")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayHits")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayLosses")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AwayPct")
                        .HasColumnType("numeric");

                    b.Property<int?>("AwayRuns")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayWins")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<long>("GamePk")
                        .HasColumnType("bigint");

                    b.Property<int?>("HomeErrors")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeHits")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeLosses")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HomePct")
                        .HasColumnType("numeric");

                    b.Property<int?>("HomeRuns")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeWins")
                        .HasColumnType("integer");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("GamePk")
                        .IsUnique();

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("StrikeData.Models.MatchInning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwayErrors")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayHits")
                        .HasColumnType("integer");

                    b.Property<int?>("AwayRuns")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeErrors")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeHits")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeRuns")
                        .HasColumnType("integer");

                    b.Property<int>("InningNumber")
                        .HasColumnType("integer");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId", "InningNumber")
                        .IsUnique();

                    b.ToTable("MatchInning");
                });

            modelBuilder.Entity("StrikeData.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("MLB_Player_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MLB_Player_Id")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("StrikeData.Models.PlayerStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerStatTypeId")
                        .HasColumnType("integer");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PlayerStatTypeId");

                    b.HasIndex("PlayerId", "PlayerStatTypeId")
                        .IsUnique()
                        .HasDatabaseName("UX_PlayerStat_Player_Type");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("StrikeData.Models.PlayerStatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatCategoryId");

                    b.ToTable("PlayerStatTypes");
                });

            modelBuilder.Entity("StrikeData.Models.StatCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("StatCategories");
                });

            modelBuilder.Entity("StrikeData.Models.StatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("StatCategoryId");

                    b.ToTable("TeamStatTypes", (string)null);
                });

            modelBuilder.Entity("StrikeData.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Games")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("StrikeData.Models.TeamGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int>("GameNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHome")
                        .HasColumnType("boolean");

                    b.Property<string>("OpponentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OpponentTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OpponentTeamId");

                    b.HasIndex("TeamId", "Season", "GameNumber")
                        .IsUnique();

                    b.ToTable("TeamGames");
                });

            modelBuilder.Entity("StrikeData.Models.TeamMonthlySplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<decimal>("WinPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId", "Season", "Month")
                        .IsUnique();

                    b.ToTable("TeamMonthlySplits");
                });

            modelBuilder.Entity("StrikeData.Models.TeamOpponentSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("OpponentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OpponentTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<decimal>("WinPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OpponentTeamId");

                    b.HasIndex("TeamId", "Season", "OpponentName")
                        .IsUnique();

                    b.ToTable("TeamOpponentSplits");
                });

            modelBuilder.Entity("StrikeData.Models.TeamStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Away")
                        .HasColumnType("real");

                    b.Property<float?>("CurrentSeason")
                        .HasColumnType("real");

                    b.Property<float?>("Home")
                        .HasColumnType("real");

                    b.Property<float?>("Last3Games")
                        .HasColumnType("real");

                    b.Property<float?>("LastGame")
                        .HasColumnType("real");

                    b.Property<byte>("Perspective")
                        .HasColumnType("smallint");

                    b.Property<float?>("PrevSeason")
                        .HasColumnType("real");

                    b.Property<int>("StatTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<string>("WinLossRecord")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float?>("WinPct")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("StatTypeId");

                    b.HasIndex("TeamId", "StatTypeId", "Perspective")
                        .IsUnique()
                        .HasDatabaseName("UX_TeamStat_Team_Type_Persp");

                    b.ToTable("TeamStats");
                });

            modelBuilder.Entity("StrikeData.Models.Match", b =>
                {
                    b.HasOne("StrikeData.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StrikeData.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("StrikeData.Models.MatchInning", b =>
                {
                    b.HasOne("StrikeData.Models.Match", "Match")
                        .WithMany("Innings")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("StrikeData.Models.Player", b =>
                {
                    b.HasOne("StrikeData.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StrikeData.Models.PlayerStat", b =>
                {
                    b.HasOne("StrikeData.Models.Player", "Player")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrikeData.Models.PlayerStatType", "PlayerStatType")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PlayerStatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerStatType");
                });

            modelBuilder.Entity("StrikeData.Models.PlayerStatType", b =>
                {
                    b.HasOne("StrikeData.Models.StatCategory", "StatCategory")
                        .WithMany()
                        .HasForeignKey("StatCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatCategory");
                });

            modelBuilder.Entity("StrikeData.Models.StatType", b =>
                {
                    b.HasOne("StrikeData.Models.StatCategory", "StatCategory")
                        .WithMany("StatTypes")
                        .HasForeignKey("StatCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatCategory");
                });

            modelBuilder.Entity("StrikeData.Models.TeamGame", b =>
                {
                    b.HasOne("StrikeData.Models.Team", "OpponentTeam")
                        .WithMany()
                        .HasForeignKey("OpponentTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StrikeData.Models.Team", "Team")
                        .WithMany("TeamGames")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpponentTeam");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StrikeData.Models.TeamMonthlySplit", b =>
                {
                    b.HasOne("StrikeData.Models.Team", "Team")
                        .WithMany("TeamMonthlySplits")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StrikeData.Models.TeamOpponentSplit", b =>
                {
                    b.HasOne("StrikeData.Models.Team", "OpponentTeam")
                        .WithMany()
                        .HasForeignKey("OpponentTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StrikeData.Models.Team", "Team")
                        .WithMany("TeamOpponentSplits")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpponentTeam");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StrikeData.Models.TeamStat", b =>
                {
                    b.HasOne("StrikeData.Models.StatType", "StatType")
                        .WithMany("TeamStats")
                        .HasForeignKey("StatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrikeData.Models.Team", "Team")
                        .WithMany("TeamStats")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatType");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StrikeData.Models.Match", b =>
                {
                    b.Navigation("Innings");
                });

            modelBuilder.Entity("StrikeData.Models.Player", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("StrikeData.Models.PlayerStatType", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("StrikeData.Models.StatCategory", b =>
                {
                    b.Navigation("StatTypes");
                });

            modelBuilder.Entity("StrikeData.Models.StatType", b =>
                {
                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("StrikeData.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");

                    b.Navigation("TeamGames");

                    b.Navigation("TeamMonthlySplits");

                    b.Navigation("TeamOpponentSplits");

                    b.Navigation("TeamStats");
                });
#pragma warning restore 612, 618
        }
    }
}
